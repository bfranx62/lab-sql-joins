USE sakila;

### List number of films/category
SELECT category.name AS 'Category', COUNT(inventory.inventory_id) as 'Count'
# gets all category names listed in category table, gets count of each inventory id per category
FROM inventory 	# starts w/ inventory table
JOIN film_category		# joins film category table to it
ON inventory.film_id = film_category.film_id		# join on film id
JOIN category		# joins category table to that table
ON category.category_id =  film_category.category_id		# joins on category id
GROUP BY category.name; 		# groups results by category name so that each only shows up once and we get a count of titles for each category

# Get store ID, city, and country for each store
SELECT store.store_id AS 'Store ID', city.city AS 'City', country.country AS 'Country'
# Gets store id, city, and country
FROM store		# starts w/ store table
JOIN address		# joins address table
ON store.address_id = address.address_id		# joins on address id
JOIN city		# joins city table
ON address.city_id = city.city_id		# joins on city_id
JOIN country		# joins country table
ON city.country_id = country.country_id		# joins on country_id
GROUP BY store.store_id;		# groups results to only one for each store.  

### Calculate total revenue in $ generated by each store
SELECT store.store_id as 'Store', SUM(payment.amount) as 'Revenue'
# Lists store id under column name Store and sum of payment amounts to that store under column Revenue
FROM store		# Gets data from store
JOIN staff		# joins staff table to store table 
ON store.store_id = staff.store_id		# joins tables on store_ids
JOIN payment		# joins payment to that joined table
ON payment.staff_id = staff.staff_id		# joins the two on staff_id
GROUP BY store.store_id;		# groups results by store_id


### Get avg runtime of films by category
SELECT category.name AS 'Film Categories', AVG(film.length) AS 'Ave Runtime'
#  gets film categories and the average length of films in each category
FROM film_category		# pulls data from film category
JOIN film		# joins film table to film category table
ON film.film_id = film_category.film_id		# designates film_id as column to merge on
JOIN category		# joins category table
ON category.category_id =  film_category.category_id		# joins on category id
GROUP BY film_category.category_id;		# gets just one result for each category id in the film category table

### Get film categories w/ longest average runtimes
SELECT DISTINCT(category.name) AS 'Category', AVG(film.length) as 'Ave Runtime'
#  gets film categories and the average length of films in each category
FROM film_category		# pulls data from film category
JOIN film		# joins film table to film category table
ON film.film_id = film_category.film_id		# designates film_id as column to merge on
JOIN category		# joins category table
ON category.category_id =  film_category.category_id		# joins on category id
GROUP BY film_category.category_id		# gets just one result for each category id in the film category table
ORDER BY AVG(film.length) DESC;		# organizes results in descending order

# Show top 10 most frequently rented movies in descending order
SELECT film.title AS 'Film', COUNT(rental.rental_id) AS 'Frequency'
# lists film title under column film and the count of the number of times a movie shows up in the rental table as column Frequency
FROM film		# starts w/ film table
JOIN inventory		# joins inventory table to it
ON inventory.film_id = film.film_id		# joins them on film_id, their equivalent column
JOIN rental		# joins rental to the joined table
ON rental.inventory_id = inventory.inventory_id		# joins on inventory id
GROUP BY film.film_id		# displays only one result for each film
ORDER BY COUNT(rental.rental_id) DESC		# orders results by the count pulled above
LIMIT 10;		# limits results to top 10

# Check whether Academy Dinosaur is available for rent at store 1
SELECT film.title AS 'Film', inventory.store_id AS 'Store'
# looks for film titles and store ids
FROM film		# starts with film table
JOIN inventory		# joins inventory table to it
ON inventory.film_id = film.film_id		# joins on film_id
WHERE film.title = 'Academy Dinosaur' AND inventory.store_id = 1;
# limits results to only show films with title 'Academy Dinosaur' in store 1
# if no results return, it means the move is not available at store 1

# Generate a list of film titles and display the availability status of each of those films
SELECT DISTINCT(film.title) AS 'Film',
# displays film titles under column Film
	CASE
		WHEN inventory.inventory_id IS NULL THEN 'No'
        ELSE 'Yes'
	END AS 'Available?'
	# creates a "case" or conditional that looks for each film title in the inventory and checks it's inventory id.
    # if that inventory id is null or nonexistent, return no
    # else return yes
    # list those results under column "Available?"
FROM film		# start w/ film table
LEFT JOIN inventory		# join inventory table to it
ON inventory.film_id = film.film_id		# join on film_id
ORDER BY film.title ASC;		# alphabetize results by film title



